version: 2
jobs:
  test:
    docker:
      - image: "alpine:3.9"
    parallelism: 4
    environment:
      TMP: /root/tmp
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true
      REDIS_HOST: oae-redis
      REDIS_PORT: 6379
    working_directory: ~/Hilary
    steps:
      - setup_remote_docker
      - run:
          name: Install system dependencies
          command: |
            apk add --update --no-cache curl git openssh-client docker py-pip python-dev libffi-dev openssl-dev gcc libc-dev make
      - checkout
      - run:
          name: Checkout submodules
          command: git submodule update --init --recursive
      - run:
          name: Creating folders for file storage and tmp files
          command: |
            mkdir -p ../files
            mkdir -p ../tmp
      - run:
          name: Adjusting Hilary configuration for tests to run
          command: |
            printf "\nconfig.ui.path = './3akai-ux';" >> config.js
            printf "\nconfig.cassandra.hosts = ['oae-cassandra'];" >> config.js
            printf "\nconfig.cassandra.timeout = 9000;" >> config.js
            printf "\nconfig.redis.host = 'oae-redis';" >> config.js
            printf "\nconfig.search.hosts[0].host = 'oae-elasticsearch';" >> config.js
            printf "\nconfig.mq.host = 'oae-redis';" >> config.js
            printf "\nconfig.etherpad.hosts[0].host = 'oae-etherpad';" >> config.js
            printf "\nconfig.ethercalc[0].host = 'oae-ethercalc';" >> config.js
            printf "\nconfig.previews.enabled = true;" >> config.js
            printf "\nconfig.email.debug = false;" >> config.js
            printf "\nconfig.email.transport = 'sendmail';" >> config.js
            printf "\nconfig.previews.office.binary = '/usr/bin/soffice';" >> config.js
            printf "\nconfig.previews.screenShotting.binary = '/usr/bin/chromium-browser';" >> config.js
            printf "\nconfig.previews.screenShotting.sandbox = '--no-sandbox';" >> config.js
      - run:
          name: Install docker-compose
          command: |
            pip install docker-compose~=1.23.2
      - run:
          name: Create the containers
          command: docker-compose up --no-start --build oae-cassandra oae-redis oae-elasticsearch oae-hilary oae-ethercalc
      - run:
          name: Start the containers
          command: |
            docker-compose up -d oae-cassandra oae-redis oae-elasticsearch oae-etherpad oae-ethercalc
      - run:
          name: Install Hilary dependencies
          command: |
            addgroup -g 1000 node
            adduser -u 1000 -G node -s /bin/sh -D node
            chown -R node:node .
            docker cp /root/Hilary oae-hilary:/usr/src
            docker-compose run --rm oae-hilary 'cd 3akai-ux && npx lerna bootstrap'
            docker-compose run --rm oae-hilary 'npx lerna bootstrap'
      - run:
          name: Run linting test
          command: |
            # docker-compose run --rm oae-hilary "yarn run lint"
            docker-compose run --rm oae-hilary "yarn run lint-module $(circleci tests glob 'packages/**/*.js' | circleci tests split | tr '\n' ' ')"
      - run:
          name: Run tests
          command: |
            docker-compose run --rm oae-hilary "yarn run test-module $(circleci tests glob 'packages/oae-*/tests' | circleci tests split | tr '\n' ' ')"
            # docker-compose run --name=tests oae-hilary "yarn run test-with-coverage"
      - run:
          name: Copy log file
          command: |
            docker cp oae-hilary:/usr/src/Hilary/tests.log .
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: /root/Hilary/test-results/mocha/results.xml
      - store_artifacts:
          path: /root/Hilary/tests.log
workflows:
  version: 2
  test-all:
    jobs:
      - test
  scheduled:
    triggers:
      - schedule:
          cron: 0 1 * * *
          filters:
            branches:
              only: master
    jobs:
      - test
